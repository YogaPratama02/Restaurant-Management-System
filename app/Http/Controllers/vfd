<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Table;
use App\Room;
use App\Category;
use App\Menu;
use App\Sale;
use App\SaleDetail;
use App\InventoryMenu;
use App\Inventory;
use App\Ppn;
use Illuminate\Support\Facades\Auth;

class CashierController extends Controller
{
    public function index()
    {
        $categories = Category::all();
        return view('cashier.index')->with('categories', $categories);
    }

    public function getTables()
    {
        $tables = Table::all();
        $html = '';
        foreach ($tables as $table) {
            $html .= '<div class="col-md-1 mb-3 mt-2">';
            $html .=
                '<button class="btn btn-primary btn-table" data-id="' . $table->id . '" data-name="' . $table->name . '">
            <img class="img-fluid" src="' . url('/images/table.svg') . '" />
            <br>';
            if ($table->status == 'available') {
                $html .= '<span class="badge badge-success">' . $table->name . '</span>';
            } else {
                $html .= '<span class="badge badge-danger">' . $table->name . '</span>';
            }
            $html .= '</button>';
            $html .= '</div>';
        }
        return $html;
    }

    public function getMenu($category_id)
    {
        $menus = Menu::where('category_id', $category_id)->get();
        $html = '';
        foreach ($menus as $menu) {
            $html .= '
            <div class="col-md-2 text-center">
                <a class="btn btn-outline-secondary btn-menu" data-id="' . $menu->id . '">
                    <img class="img-fluid justify-content-between" style="width:110px; height:90px;" src="' . url('/menu_images/' . $menu->image) . '"/>
                    <br>
                    ' . $menu->name . '
                    <br>
                    Rp' . number_format($menu->price, 3) . '
                </a>
            </div>
            ';
        }
        return $html;
    }

    public function getOrder(Request $request)
    {
        $menu = Menu::find($request->menu_id);
        $table_id = $request->table_id;
        $table_name = $request->table_name;
        $sale = Sale::where('table_id', $table_id)->where('sale_status', 'unpaid')->first();
        // crate penjualan baru
        if (!$sale) {
            $user = Auth::user();
            $sale = new Sale();
            $sale->table_id = $table_id;
            $sale->table_name = $table_name;
            $sale->user_id = $user->id;
            $sale->user_name = $user->name;
            $sale->save();
            $sale_id = $sale->id;
            // update status table
            $table = Table::find($table_id);
            $table->status = "unvailable";
            $table->save();
        } else {
            // jika sudah ada order
            $sale_id = $sale->id;
            $saledetail = SaleDetail::where('sale_id', $sale_id)->where('menu_id', $menu->id)->first();
            if($saledetail){
                $saledetail->quantity++;
                $saledetail->save();
                $sale->total_price = $sale->total_price + ($request->quantity * $menu->price) - ($request->quantity * $menu->price * ($menu->discount/100));
                $sale->total_hpp = $sale->total_hpp + ($request->quantity * $menu->hpp);
                // $ppn = Ppn::all();
                // foreach($ppn as $ppn){
                //     $ppn->ppn;
                // }
                // $sale->total_price = ($menu->price - ($menu->price * ($menu->discount/100))) * $saledetail->quantity;
                // $sale->total_price = $sale->total_price + (($sale->total_price * ($ppn->ppn/100)));
                // $sale->save();
                // $sale->total_price = $sale->total_price + (($sale->total_price * ($ppn->ppn/100)));
                $sale->save();
                // if ($saledetail->status == 'confirm') {
                //     $ppn = Ppn::all();
                //     foreach($ppn as $ppn){
                //         $ppn->ppn;
                //         $sale->total_price = ($menu->price - ($menu->price * ($menu->discount/100))) * $saledetail->quantity;
                //         $sale->total_price = $sale->total_price + (($sale->total_price * ($ppn->ppn/100)));
                //         $sale->save();
                //     }
                //     // $haha = SaleDetail::where('sale_id', $sale_id)->where('menu_id', $menu->id)->first();
                //     // if($haha){
                //     //     $sale->total_price = ($sale->total_price);
                //     //     $sale->save();
                //     // }
                // }
                // dd($total_price);
                $inventmenus = InventoryMenu::where('menu_id', $menu->id)->get();
                // dd($inventmenus);
                foreach($inventmenus as $inventmenu){
                    $invent = Inventory::find($inventmenu->inventory_id);
                    $save = $invent->update([
                        'stock_quantity' => $invent->stock_quantity - ($inventmenu->consumption * ($saledetail->quantity/$saledetail->quantity))
                    ]);
                    // dd($save);
                }
                    // dd($request);
                $html = $this->getSaleDetails($sale_id);
                return $html;
            }
        }
        // tambah menu pesanan ke sale_detail
        $saleDetail = new SaleDetail();
        // if($saleDetail->status == 'NoConfirm'){
        //     $saleDetail->status = 'confirm';
        //     $saleDetail->save();
        // }
        $saleDetail->sale_id = $sale_id;
        $saleDetail->menu_id = $menu->id;
        $saleDetail->menu_name = $menu->name;
        $saleDetail->menu_price = $menu->price;
        $saleDetail->menu_discount = $menu->discount;
        $saleDetail->quantity = $request->quantity;
        // $saleDetail_id = $saleDetail->id;
        $saleDetail->save();
        // $ppn = Ppn::all();
        // foreach($ppn as $ppn){
        //     $ppn->ppn;
        // }
        // update total_price;
        // if($saleDetail->status == 'NoConfirm'){
        //     $ppn = Ppn::all();
        //     foreach($ppn as $ppn){
        //         $ppn->ppn;
        //     }
        //     $sale->total_price = $sale->total_price + ($sale->total_price * $saleDetail->quantity);
        //     $sale->save();
        // }
        $sale->total_hpp = $sale->total_hpp + ($request->quantity * $menu->hpp);
        $sale->total_price = ($sale->total_price + ($request->quantity * $menu->price) - ($request->quantity * $menu->price * ($menu->discount/100)));
        // $sale->total_price = $sale->total_price + ($sale->total_price * ($ppn->ppn/100));
        // dd($total_price);
        $sale->save();

        $inventmenus = InventoryMenu::where('menu_id', $menu->id)->get();
        // dd($inventmenus);
        foreach($inventmenus as $inventmenu){
            $invent = Inventory::find($inventmenu->inventory_id);
            $save = $invent->update([
                'stock_quantity' => $invent->stock_quantity - ($inventmenu->consumption * $saleDetail->quantity)
            ]);
            // dd($save);
        }
            // dd($request);
        $html = $this->getSaleDetails($sale_id);
        return $html;
    }

    public function getSaleDetailsByTable($table_id)
    {
        $sale = Sale::where('table_id', $table_id)->where('sale_status', 'unpaid')->first();
        $html = '';
        // cek jika ada saledetail yang mempunya sale
        if ($sale) {
            $sale_id = $sale->id;
            $html .= $this->getSaleDetails($sale_id);
        } else {
            $html .= "tidak ada order";
        }
        return $html;
    }

    private function getSaleDetails($sale_id)
    {
        $html = '<p hidden>Sale ID: ' . $sale_id . '</p>';
        $ppn = Ppn::all();
        $saleDetails = SaleDetail::where('sale_id', $sale_id)->get();
        $html .= '<div class="table-responsive-md" style="overflow-y:scroll; height: 400px; border: 1px; solid #343A40">
        <table class="table table-stripped table-white">
        <thead class="text-white" style="background-color: #295192">
            <tr>
                <th scope="col">No</th>
                <th scope="col">Menu</th>
                <th scope="col">Quantity</th>
                <th scope="col">Price</th>
                <th scope="col">Diskon</th>
                <th scope="col">Total</th>
            </tr>
        </thead>
        <tbody>';
        $showBtnPayment = true;
        $i = 0;
        foreach ($saleDetails as $saleDetail) {
            $decreaseButton = '<button class="btn btn-danger btn-sm btn-decrease-quantity" disabled>-</button>';

            if ($saleDetail->quantity > 0) {
                $decreaseButton = '<button data-id="' . $saleDetail->id . '" class="btn btn-danger btn-sm btn-decrease-quantity">-</button>';
            }
            $html .= '
                <tr>
                    <td>'. ++$i .'</td>
                    <td>' . $saleDetail->menu_name . '</td>
                    <td>' . $decreaseButton . '  ' . $saleDetail->quantity . ' </td>
                    <td>' . "Rp " .  number_format($saleDetail->menu_price * $saleDetail->quantity, 0, ',', '.') . '</td>
                    <td>' . $saleDetail->menu_discount . ' ' .'%'. '</td>
                    <td>' . "Rp " . number_format(($saleDetail->menu_price * $saleDetail->quantity - $saleDetail->menu_price * $saleDetail->quantity * ($saleDetail->menu_discount/100)), 0, ',', '.') . '</td>';
            // if ($saleDetail->status == 'NoConfirm') {
                // $showBtnPayment = false;
                // $html .= '<td><a data-id="' . $saleDetail->id . '" class="btn btn-danger btn-delete-saledetail"><i class="fas fa-trash"></i></a></td>';
            // }

            $html .= '</tr>';
        }
        foreach($ppn as $ppn){
            $html .= '<td>PPN: '. $ppn->ppn .' %</td>';
        }
        $html .= '</tbody></table></div>';

        $sale = Sale::find($sale_id);
        $html .= '<hr>';
        $html .= '<h3 class="try" data-all="'.($sale->total_price + ($sale->total_price * $ppn->ppn/100)) .'">Total: Rp ' . number_format($sale->total_price + ($sale->total_price * $ppn->ppn/100), 0, ',', '.') . '</h3>';
        // $sale->total_price = ($sale->total_price + ($sale->total_price * $ppn->ppn/100));
        // $sale->save();

        $detail = SaleDetail::where('sale_id', $sale_id)->first();
        if ($detail->status == 'confirm') {
            $html .= '
            <div class="card-body">
            <div class="panel">
                <div class="row">
                    <td>Payment Method <br>
                    <div class="form-control">
                        <span class="radio-item">
                            <input type="radio" name="payment_type" class="true" value="cash" checked="checked">
                            <label for="payment_type"> <i class="fa fa-money-bill text-success"></i> Cash</label>

                            <input type="radio" name="payment_type" class="true" value="bank transfer">
                            <label for="payment_type"> <i class="fa fa-university text-danger"></i> Bank Transfer</label>

                            <input type="radio" name="payment_type" class="true" value="credit Card">
                            <label for="payment_type"> <i class="fa fa-credit-card text-info"></i> Credit Card</label>
                        </span>
                    </div>
                    </td><br>
                    <td>
                        Payment
                        <input type="number" name="paid_amout" id="paid_amount" class="form-control">
                    </td>
                    <td>
                        Returning Change
                        <input type="number" readonly name="balance" id="balance" class="form-control">
                    </td>
                </div>
            </div>
        </div>
            ';
            $html .= '<button data-id="' . $sale_id . '" data-total="' . $sale->total_price . '" class="btn btn-success btn-block btn-payment">Payment</button>';
        } else {
            $html .= '
            <table class="table table-striped">
                        <tr>
                            <td>
                                <label for="">Customer Name</label>
                                <input type="text" name="customer_name" id="customer_name" class="form-control">
                            </td>
                            <td>
                                <label for="">Customer Phone</label>
                                <input type="number" name="customer_phone" id="customer_phone" class="form-control">
                            </td>
                        </tr>
                    </table>
                ';
            $html .= '<button data-id="' . $sale_id . '" class="btn btn-warning btn-block btn-confirm-order">Confirm Order</button>';
        }
        // $showBtnPayment = false;


        // $saleDetails = SaleDetail::where('sale_id', $sale_id)->where(['status' => 'confirm']);

        return $html;
    }

    public function confirmOrder(Request $request)
    {
        $customer_name = $request->customer_name;
        $customer_phone = $request->customer_phone;
        $total_price = $request->total_price;
        $sale_id = $request->sale_id;
        $sale = Sale::find($sale_id);
        // $ppn = Ppn::all();
        // foreach($ppn as $ppn){
        //     $ppn->ppn;
        // }
        // $sale->total_price = $total_price;
        $sale->customer_name = $customer_name;
        $sale->customer_phone = $customer_phone;
        // $ppn = Ppn::all();
        // foreach($ppn as $ppn){
        //     $ppn->ppn;
        // }
        // $sale->total_price = $sale->total_price + ($sale->total_price * ($ppn->ppn/100));
        $sale->save();
        $saleDetails = SaleDetail::where('sale_id', $sale_id)->update(['status' => 'confirm']);
        $html = $this->getSaleDetails($sale_id);
        return $html;
    }

    // public function increaseQuantity(Request $request)
    // {
    //     // dd($request);
    //     // update
    //     $saleDetail_id = $request->saleDetail_id;
    //     $saleDetail = SaleDetail::where('id', $saleDetail_id)->first();
    //     $saleDetail->quantity = $saleDetail->quantity + 1;
    //     $saleDetail->save();

    //     // update
    //     $sale = Sale::where('id', $saleDetail->sale_id)->first();
    //     $sale->total_price = $sale->total_price + $saleDetail->menu_price - ($saleDetail->menu_price * ($saleDetail->menu_discount/100));
    //     $sale->save();

    //     $html = $this->getSaleDetails($saleDetail->sale_id);

    //     return $html;
    // }

    public function decreaseQuantity(Request $request)
    {
        // update
        $saleDetail_id = $request->saleDetail_id;
        $saleDetail = SaleDetail::where('id', $saleDetail_id)->first();
        $sale_id = $saleDetail->sale_id;
        $saleDetail->quantity = $saleDetail->quantity - 1;
        $saleDetail->save();

        // update
        $sale = Sale::where('id', $saleDetail->sale_id)->first();
        $menus = Menu::find($saleDetail->menu_id);
        $sale->total_hpp = $sale->total_hpp -  $menus->hpp;
        $sale->total_price = $sale->total_price - $saleDetail->menu_price + ($saleDetail->menu_price * ($saleDetail->menu_discount/100));
        $sale->save();

        $menu = Menu::find($saleDetail->menu_id);
        $inventmenus = InventoryMenu::where('menu_id', $menu->id)->get();
        foreach($inventmenus as $inventmenu){
            $invent = Inventory::find($inventmenu->inventory_id);
                $save = $invent->update([
                    'stock_quantity' => $invent->stock_quantity + ($inventmenu->consumption)
                ]);
        }

        if($saleDetail->quantity == 0){
            $saleDetail->delete();
        }
        $sale = SaleDetail::where('sale_id', $sale_id)->first();
        if($sale==null){
            $sisi = Sale::find($sale_id)->delete();
            $table = Table::find($sisi);
            $table->status = 'available';
            $table->save();
            $html = 'tidak ada order';
        }else{
            $html = $this->getSaleDetails($saleDetail->sale_id);
        }

        return $html;
    }

    public function savePayment(Request $request)
    {
        $saleID = $request->saleID;
        $receiveTotal = $request->receiveTotal;
        $paymentType = $request->paymentType;
        $ppn = Ppn::all();
            foreach($ppn as $ppn){
                $ppn->ppn;
        }
        // update sale information in the sales table by using sale model
        $sale = Sale::find($saleID);
        $sale->total_received = $receiveTotal;
        $sale->change = ($receiveTotal - $sale->total_price) - ($sale->total_price * ($ppn->ppn/100));
        $sale->payment_type = $paymentType;
        $sale->sale_status = 'paid';
        $sale->total_price = ($sale->total_price + ($sale->total_price * $ppn->ppn/100));
        $sale->save();

        // update table to available
        $table = Table::find($sale->table_id);
        $table->status = 'available';
        $table->save();

        // update sale detail
        $saleDetails = SaleDetail::where('sale_id', $saleID)->update(['status' => 'confirm']);

        return '/cashier/showReceipt/' . $saleID;
    }



    public function showReceipt($saleID)
    {
        $sale = Sale::find($saleID);
        $saleDetails = SaleDetail::where('sale_id', $saleID)->get();
        return view('cashier.showReceipt')->with('sale', $sale)->with('saleDetails', $saleDetails);
    }
}


<div class="mb-1 hehe">
                        <button class="btn btn-outline-secondary btn-menu" data-id="' . $menu->id . '" disabled>
                        <img class="img-fluid justify-content-between images" style="width:110px; height:90px;" src="' . url('/menu_images/' . $menu->image) . '"/>
                        <div class="banner-text">
                            <h4 class="grid-content">Sold Out</h4>
                            <h5>' . $menu->name . '</h5>
                            <p> Rp' . number_format($menu->price, 3) . '</p>
                        </div>
                        </button>
                    </div>
                    @extends('layouts.default')

@section('content')
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.css">
    <div class="container">
        <div class="card-body">
            <div class="row">
                <div class="col-md-4 form-group input-daterange">
                    <input type="text" name="date_start" id="date_start" class="form-control text-center" placeholder="from date.." readonly style="width: 300px;" />
                </div>
                <div class="col-md-4 form-group dt2">
                    <input type="text" name="date_end" id="date_end" class="form-control text-center" placeholder="end date.." readonly style="width: 300px;"  />
                </div>
                <div class="col-md-4">
                    <button type="button" name="filter" id="filter" class="btn btn-primary">Filter</button>
                    <button type="button" name="refresh" id="refresh" class="btn btn-primary">Refresh</button>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="col-md-12 text-center">
                        <div style="font-size: 26px; font-weight: bold">Monthly Sale Report</div>
                        <span id="e" style="font-size: 24px"></span>
                    </div>
                    <div class="card-body">
                        <table class="table table-bordered text-center" style="width:100%">
                            <thead>
                                <tr class="text-lite text-center">
                                    <th scope="col">No</th>
                                    <th scope="col">Month</th>
                                    <th scope="col">Total HPP</th>
                                    <th scope="col">Total Price</th>
                                    <th scope="col">Total Sale</th>
                                </tr>
                            </thead>
                            <tbody id="d">

                            </tbody>
                            <tfoot id="hi">
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12" id="c"></div>
                <div class="col-md-12" id="u"></div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="card-body">
                        <table class="table table-bordered text-center" style="width:100%">
                            <thead>
                                <tr class="text-lite text-center">
                                    <th scope="col">No</th>
                                    <th scope="col">Menu Name</th>
                                    <th scope="col">Total Sold</th>
                                </tr>
                            </thead>
                            <tbody id="k">

                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12" >
                    <canvas id="chart"></canvas>
                </div>
            </div>
        </div>
    </div>
@endsection

@push('after-script')
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>

    <script type="text/javascript">
        // $(document).ready(function(){
                $('#date_start').datepicker({
                    format: 'dd-mm-yyyy',
                    minViewMode: 1,
                    autoclose: true
                    // viewMode: "months", //this
                    // minViewMode: "months",
                });

                // var today = new Date();
                // var month = today.getMonth();
                // var year = today.getFullYear();

                // var lastDate = new Date(year, month + 1, 0);
                // var lastDay = lastDate.getDate();

                $("#date_end").datepicker({
                    format: 'dd-mm-yyyy',
                    minViewMode: 1,
                    autoclose: true,
                    }).on('changeDate',function(e)
                        {
                            $("#date_end").datepicker('update', new Date(e.date.getFullYear(), e.date.getMonth() + 1, 0));
                        });

                month_data();
                function month_data(date_start = '', date_end='')
                {
                    $.ajax({
                        url: "{{route('report.month')}}",
                        type: "GET",
                        dataType:"json",
                        data: {date_start: date_start, date_end:date_end},
                        success: function(data)
                        {
                            $('#d').html(data.menuz);
                            $('#hi').html(data.tal);
                            $('#c').html(data.cash);
                            $('#u').html(data.bank);
                            $('#k').html(data.menu);
                        },
                        error: function(data)
                        {
                            alert('not responding');
                        }
                    });
                }


                $('#filter').click(function(){
                    var date_start = $('#date_start').val();
                    var date_end = $('#date_end').val();
                    if(date_start != '' && date_end != ''){
                        $('#e').html(date_start).append(' to ', date_end );
                        month_data(date_start, date_end);
                    }else{
                        alert('Both date is required');
                    }
                });

                $('#refresh').click(function(){
                    $('#date_start').val('');
                    $('#date_end').val('');
                    $('#e').html('');
                    month_data();
                });
            // });
            var data = "{{ route('report.month') }}";
            let myChart = document.getElementById('chart').getContext('2d');
            let a = new Chart(myChart, {
                type: 'bar',
                data: {
                    labels: Object.keys(data),
                    datasets: [{
                        label: 'Population',
                        data: Object.values(data),
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.6)',
                            'rgba(54, 162, 235, 0.6)',
                            'rgba(255, 206, 86, 0.6)',
                            'rgba(75, 99, 132, 0.6)',
                            'rgba(153, 102, 255, 0.6)',
                            'rgba(255, 159, 64, 0.6)',
                        ],
                        borderWidth: 2,
                        borderColor: '#777',
                    }]
                },
                options: {}
            });
    </script>
@endpush
<?php

namespace App\Exports;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Sale;
use Illuminate\Contracts\View\View;
use Maatwebsite\Excel\Concerns\FromView;

class SaleReportExport implements FromView
{
    private $date_start;
    private $date_end;
    private $sales;
    private $totalSale;
    public function __construct(Request $request)
    {
        $date_start = date("Y-m-d H:i:s", strtotime($date_start));
        $date_end = date("Y-m-d H:i:s", strtotime($date_end));

        $sales = Sale::whereBetween('updated_at', [$date_start, $date_end])->where('sale_status', 'paid')->get();
        $totalSale = $sales->sum('total_price');
        $this->date_start = $date_start;
        $this->date_end = $date_end;
        $this->sales = $sales;
        $this->totalSale = $totalSale;
    }

    public function view(): View
    {
        return view('exports.salereport', [
            'date_start' => $this->date_start,
            'date_end' => $this->date_end,
            'sales' => $this->sales,
            'totalSale' => $this->totalSale
        ]);
    }
}

excel_data();
                function excel_data(date_start = '', date_end=''){
                $(document).on('click', '.excel', function(){
                    $.ajax({
                        method: "GET",
                        url: "{{route('report.excel')}}",
                        data: {date_start: date_start, date_end:date_end},
                        success: function(response) {
                            window.location.href = "{{route('report.excel')}}";
                        }
                    });
                    // console.log({date_start: date_start, date_end:date_end});
                });
            }


